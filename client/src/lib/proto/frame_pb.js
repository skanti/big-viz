// source: frame.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.tumcadcar.CameraCalibration', null, global);
goog.exportSymbol('proto.tumcadcar.CameraCalibration.RollingShutterReadOutDirection', null, global);
goog.exportSymbol('proto.tumcadcar.CameraImage', null, global);
goog.exportSymbol('proto.tumcadcar.CameraLabels', null, global);
goog.exportSymbol('proto.tumcadcar.CameraName', null, global);
goog.exportSymbol('proto.tumcadcar.CameraName.Name', null, global);
goog.exportSymbol('proto.tumcadcar.Context', null, global);
goog.exportSymbol('proto.tumcadcar.Context.Stats', null, global);
goog.exportSymbol('proto.tumcadcar.Context.Stats.ObjectCount', null, global);
goog.exportSymbol('proto.tumcadcar.Frame', null, global);
goog.exportSymbol('proto.tumcadcar.Label', null, global);
goog.exportSymbol('proto.tumcadcar.Label.Box', null, global);
goog.exportSymbol('proto.tumcadcar.Label.Box.Type', null, global);
goog.exportSymbol('proto.tumcadcar.Label.DifficultyLevel', null, global);
goog.exportSymbol('proto.tumcadcar.Label.Metadata', null, global);
goog.exportSymbol('proto.tumcadcar.Label.Type', null, global);
goog.exportSymbol('proto.tumcadcar.Laser', null, global);
goog.exportSymbol('proto.tumcadcar.LaserCalibration', null, global);
goog.exportSymbol('proto.tumcadcar.LaserName', null, global);
goog.exportSymbol('proto.tumcadcar.LaserName.Name', null, global);
goog.exportSymbol('proto.tumcadcar.Points', null, global);
goog.exportSymbol('proto.tumcadcar.RangeImage', null, global);
goog.exportSymbol('proto.tumcadcar.Transform', null, global);
goog.exportSymbol('proto.tumcadcar.Velocity', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tumcadcar.Label = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tumcadcar.Label, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tumcadcar.Label.displayName = 'proto.tumcadcar.Label';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tumcadcar.Label.Box = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tumcadcar.Label.Box, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tumcadcar.Label.Box.displayName = 'proto.tumcadcar.Label.Box';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tumcadcar.Label.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tumcadcar.Label.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tumcadcar.Label.Metadata.displayName = 'proto.tumcadcar.Label.Metadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tumcadcar.CameraName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tumcadcar.CameraName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tumcadcar.CameraName.displayName = 'proto.tumcadcar.CameraName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tumcadcar.LaserName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tumcadcar.LaserName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tumcadcar.LaserName.displayName = 'proto.tumcadcar.LaserName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tumcadcar.Transform = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tumcadcar.Transform.repeatedFields_, null);
};
goog.inherits(proto.tumcadcar.Transform, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tumcadcar.Transform.displayName = 'proto.tumcadcar.Transform';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tumcadcar.Velocity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tumcadcar.Velocity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tumcadcar.Velocity.displayName = 'proto.tumcadcar.Velocity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tumcadcar.CameraCalibration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tumcadcar.CameraCalibration.repeatedFields_, null);
};
goog.inherits(proto.tumcadcar.CameraCalibration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tumcadcar.CameraCalibration.displayName = 'proto.tumcadcar.CameraCalibration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tumcadcar.LaserCalibration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tumcadcar.LaserCalibration.repeatedFields_, null);
};
goog.inherits(proto.tumcadcar.LaserCalibration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tumcadcar.LaserCalibration.displayName = 'proto.tumcadcar.LaserCalibration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tumcadcar.Context = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tumcadcar.Context.repeatedFields_, null);
};
goog.inherits(proto.tumcadcar.Context, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tumcadcar.Context.displayName = 'proto.tumcadcar.Context';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tumcadcar.Context.Stats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tumcadcar.Context.Stats.repeatedFields_, null);
};
goog.inherits(proto.tumcadcar.Context.Stats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tumcadcar.Context.Stats.displayName = 'proto.tumcadcar.Context.Stats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tumcadcar.Context.Stats.ObjectCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tumcadcar.Context.Stats.ObjectCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tumcadcar.Context.Stats.ObjectCount.displayName = 'proto.tumcadcar.Context.Stats.ObjectCount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tumcadcar.RangeImage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tumcadcar.RangeImage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tumcadcar.RangeImage.displayName = 'proto.tumcadcar.RangeImage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tumcadcar.CameraImage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tumcadcar.CameraImage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tumcadcar.CameraImage.displayName = 'proto.tumcadcar.CameraImage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tumcadcar.CameraLabels = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tumcadcar.CameraLabels.repeatedFields_, null);
};
goog.inherits(proto.tumcadcar.CameraLabels, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tumcadcar.CameraLabels.displayName = 'proto.tumcadcar.CameraLabels';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tumcadcar.Laser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tumcadcar.Laser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tumcadcar.Laser.displayName = 'proto.tumcadcar.Laser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tumcadcar.Points = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tumcadcar.Points.repeatedFields_, null);
};
goog.inherits(proto.tumcadcar.Points, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tumcadcar.Points.displayName = 'proto.tumcadcar.Points';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tumcadcar.Frame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tumcadcar.Frame.repeatedFields_, null);
};
goog.inherits(proto.tumcadcar.Frame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tumcadcar.Frame.displayName = 'proto.tumcadcar.Frame';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tumcadcar.Label.prototype.toObject = function(opt_includeInstance) {
  return proto.tumcadcar.Label.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tumcadcar.Label} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Label.toObject = function(includeInstance, msg) {
  var f, obj = {
    box: (f = msg.getBox()) && proto.tumcadcar.Label.Box.toObject(includeInstance, f),
    metadata: (f = msg.getMetadata()) && proto.tumcadcar.Label.Metadata.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    id: jspb.Message.getFieldWithDefault(msg, 4, ""),
    detectionDifficultyLevel: jspb.Message.getFieldWithDefault(msg, 5, 0),
    trackingDifficultyLevel: jspb.Message.getFieldWithDefault(msg, 6, 0),
    numLidarPointsInBox: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tumcadcar.Label}
 */
proto.tumcadcar.Label.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tumcadcar.Label;
  return proto.tumcadcar.Label.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tumcadcar.Label} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tumcadcar.Label}
 */
proto.tumcadcar.Label.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tumcadcar.Label.Box;
      reader.readMessage(value,proto.tumcadcar.Label.Box.deserializeBinaryFromReader);
      msg.setBox(value);
      break;
    case 2:
      var value = new proto.tumcadcar.Label.Metadata;
      reader.readMessage(value,proto.tumcadcar.Label.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 3:
      var value = /** @type {!proto.tumcadcar.Label.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 5:
      var value = /** @type {!proto.tumcadcar.Label.DifficultyLevel} */ (reader.readEnum());
      msg.setDetectionDifficultyLevel(value);
      break;
    case 6:
      var value = /** @type {!proto.tumcadcar.Label.DifficultyLevel} */ (reader.readEnum());
      msg.setTrackingDifficultyLevel(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumLidarPointsInBox(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tumcadcar.Label.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tumcadcar.Label.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tumcadcar.Label} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Label.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBox();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tumcadcar.Label.Box.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tumcadcar.Label.Metadata.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDetectionDifficultyLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getTrackingDifficultyLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getNumLidarPointsInBox();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.tumcadcar.Label.Type = {
  TYPE_UNKNOWN: 0,
  TYPE_VEHICLE: 1,
  TYPE_PEDESTRIAN: 2,
  TYPE_SIGN: 3,
  TYPE_CYCLIST: 4
};

/**
 * @enum {number}
 */
proto.tumcadcar.Label.DifficultyLevel = {
  UNKNOWN: 0,
  LEVEL_1: 1,
  LEVEL_2: 2
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tumcadcar.Label.Box.prototype.toObject = function(opt_includeInstance) {
  return proto.tumcadcar.Label.Box.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tumcadcar.Label.Box} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Label.Box.toObject = function(includeInstance, msg) {
  var f, obj = {
    centerX: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    centerY: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    centerZ: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    length: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    width: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    height: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    heading: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tumcadcar.Label.Box}
 */
proto.tumcadcar.Label.Box.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tumcadcar.Label.Box;
  return proto.tumcadcar.Label.Box.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tumcadcar.Label.Box} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tumcadcar.Label.Box}
 */
proto.tumcadcar.Label.Box.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCenterX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCenterY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCenterZ(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLength(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWidth(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeight(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeading(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tumcadcar.Label.Box.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tumcadcar.Label.Box.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tumcadcar.Label.Box} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Label.Box.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCenterX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getCenterY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getCenterZ();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getLength();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getHeading();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.tumcadcar.Label.Box.Type = {
  TYPE_UNKNOWN: 0,
  TYPE_3D: 1,
  TYPE_2D: 2,
  TYPE_AA_2D: 3
};

/**
 * optional double center_x = 1;
 * @return {number}
 */
proto.tumcadcar.Label.Box.prototype.getCenterX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.Label.Box} returns this
 */
proto.tumcadcar.Label.Box.prototype.setCenterX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double center_y = 2;
 * @return {number}
 */
proto.tumcadcar.Label.Box.prototype.getCenterY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.Label.Box} returns this
 */
proto.tumcadcar.Label.Box.prototype.setCenterY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double center_z = 3;
 * @return {number}
 */
proto.tumcadcar.Label.Box.prototype.getCenterZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.Label.Box} returns this
 */
proto.tumcadcar.Label.Box.prototype.setCenterZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double length = 5;
 * @return {number}
 */
proto.tumcadcar.Label.Box.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.Label.Box} returns this
 */
proto.tumcadcar.Label.Box.prototype.setLength = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double width = 4;
 * @return {number}
 */
proto.tumcadcar.Label.Box.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.Label.Box} returns this
 */
proto.tumcadcar.Label.Box.prototype.setWidth = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double height = 6;
 * @return {number}
 */
proto.tumcadcar.Label.Box.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.Label.Box} returns this
 */
proto.tumcadcar.Label.Box.prototype.setHeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double heading = 7;
 * @return {number}
 */
proto.tumcadcar.Label.Box.prototype.getHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.Label.Box} returns this
 */
proto.tumcadcar.Label.Box.prototype.setHeading = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tumcadcar.Label.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.tumcadcar.Label.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tumcadcar.Label.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Label.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    speedX: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    speedY: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    accelX: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    accelY: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tumcadcar.Label.Metadata}
 */
proto.tumcadcar.Label.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tumcadcar.Label.Metadata;
  return proto.tumcadcar.Label.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tumcadcar.Label.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tumcadcar.Label.Metadata}
 */
proto.tumcadcar.Label.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeedY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccelX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccelY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tumcadcar.Label.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tumcadcar.Label.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tumcadcar.Label.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Label.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpeedX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getSpeedY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getAccelX();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getAccelY();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double speed_x = 1;
 * @return {number}
 */
proto.tumcadcar.Label.Metadata.prototype.getSpeedX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.Label.Metadata} returns this
 */
proto.tumcadcar.Label.Metadata.prototype.setSpeedX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double speed_y = 2;
 * @return {number}
 */
proto.tumcadcar.Label.Metadata.prototype.getSpeedY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.Label.Metadata} returns this
 */
proto.tumcadcar.Label.Metadata.prototype.setSpeedY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double accel_x = 3;
 * @return {number}
 */
proto.tumcadcar.Label.Metadata.prototype.getAccelX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.Label.Metadata} returns this
 */
proto.tumcadcar.Label.Metadata.prototype.setAccelX = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double accel_y = 4;
 * @return {number}
 */
proto.tumcadcar.Label.Metadata.prototype.getAccelY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.Label.Metadata} returns this
 */
proto.tumcadcar.Label.Metadata.prototype.setAccelY = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional Box box = 1;
 * @return {?proto.tumcadcar.Label.Box}
 */
proto.tumcadcar.Label.prototype.getBox = function() {
  return /** @type{?proto.tumcadcar.Label.Box} */ (
    jspb.Message.getWrapperField(this, proto.tumcadcar.Label.Box, 1));
};


/**
 * @param {?proto.tumcadcar.Label.Box|undefined} value
 * @return {!proto.tumcadcar.Label} returns this
*/
proto.tumcadcar.Label.prototype.setBox = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tumcadcar.Label} returns this
 */
proto.tumcadcar.Label.prototype.clearBox = function() {
  return this.setBox(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tumcadcar.Label.prototype.hasBox = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Metadata metadata = 2;
 * @return {?proto.tumcadcar.Label.Metadata}
 */
proto.tumcadcar.Label.prototype.getMetadata = function() {
  return /** @type{?proto.tumcadcar.Label.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.tumcadcar.Label.Metadata, 2));
};


/**
 * @param {?proto.tumcadcar.Label.Metadata|undefined} value
 * @return {!proto.tumcadcar.Label} returns this
*/
proto.tumcadcar.Label.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tumcadcar.Label} returns this
 */
proto.tumcadcar.Label.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tumcadcar.Label.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Type type = 3;
 * @return {!proto.tumcadcar.Label.Type}
 */
proto.tumcadcar.Label.prototype.getType = function() {
  return /** @type {!proto.tumcadcar.Label.Type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.tumcadcar.Label.Type} value
 * @return {!proto.tumcadcar.Label} returns this
 */
proto.tumcadcar.Label.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string id = 4;
 * @return {string}
 */
proto.tumcadcar.Label.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.tumcadcar.Label} returns this
 */
proto.tumcadcar.Label.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional DifficultyLevel detection_difficulty_level = 5;
 * @return {!proto.tumcadcar.Label.DifficultyLevel}
 */
proto.tumcadcar.Label.prototype.getDetectionDifficultyLevel = function() {
  return /** @type {!proto.tumcadcar.Label.DifficultyLevel} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.tumcadcar.Label.DifficultyLevel} value
 * @return {!proto.tumcadcar.Label} returns this
 */
proto.tumcadcar.Label.prototype.setDetectionDifficultyLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional DifficultyLevel tracking_difficulty_level = 6;
 * @return {!proto.tumcadcar.Label.DifficultyLevel}
 */
proto.tumcadcar.Label.prototype.getTrackingDifficultyLevel = function() {
  return /** @type {!proto.tumcadcar.Label.DifficultyLevel} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.tumcadcar.Label.DifficultyLevel} value
 * @return {!proto.tumcadcar.Label} returns this
 */
proto.tumcadcar.Label.prototype.setTrackingDifficultyLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional int32 num_lidar_points_in_box = 7;
 * @return {number}
 */
proto.tumcadcar.Label.prototype.getNumLidarPointsInBox = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.Label} returns this
 */
proto.tumcadcar.Label.prototype.setNumLidarPointsInBox = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tumcadcar.CameraName.prototype.toObject = function(opt_includeInstance) {
  return proto.tumcadcar.CameraName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tumcadcar.CameraName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.CameraName.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tumcadcar.CameraName}
 */
proto.tumcadcar.CameraName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tumcadcar.CameraName;
  return proto.tumcadcar.CameraName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tumcadcar.CameraName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tumcadcar.CameraName}
 */
proto.tumcadcar.CameraName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tumcadcar.CameraName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tumcadcar.CameraName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tumcadcar.CameraName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.CameraName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.tumcadcar.CameraName.Name = {
  UNKNOWN: 0,
  FRONT: 1,
  FRONT_LEFT: 2,
  FRONT_RIGHT: 3,
  SIDE_LEFT: 4,
  SIDE_RIGHT: 5
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tumcadcar.LaserName.prototype.toObject = function(opt_includeInstance) {
  return proto.tumcadcar.LaserName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tumcadcar.LaserName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.LaserName.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tumcadcar.LaserName}
 */
proto.tumcadcar.LaserName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tumcadcar.LaserName;
  return proto.tumcadcar.LaserName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tumcadcar.LaserName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tumcadcar.LaserName}
 */
proto.tumcadcar.LaserName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tumcadcar.LaserName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tumcadcar.LaserName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tumcadcar.LaserName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.LaserName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.tumcadcar.LaserName.Name = {
  UNKNOWN: 0,
  TOP: 1,
  FRONT: 2,
  SIDE_LEFT: 3,
  SIDE_RIGHT: 4,
  REAR: 5
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tumcadcar.Transform.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tumcadcar.Transform.prototype.toObject = function(opt_includeInstance) {
  return proto.tumcadcar.Transform.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tumcadcar.Transform} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Transform.toObject = function(includeInstance, msg) {
  var f, obj = {
    transformList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tumcadcar.Transform}
 */
proto.tumcadcar.Transform.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tumcadcar.Transform;
  return proto.tumcadcar.Transform.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tumcadcar.Transform} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tumcadcar.Transform}
 */
proto.tumcadcar.Transform.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setTransformList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tumcadcar.Transform.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tumcadcar.Transform.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tumcadcar.Transform} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Transform.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransformList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
};


/**
 * repeated double transform = 1;
 * @return {!Array<number>}
 */
proto.tumcadcar.Transform.prototype.getTransformList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.tumcadcar.Transform} returns this
 */
proto.tumcadcar.Transform.prototype.setTransformList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tumcadcar.Transform} returns this
 */
proto.tumcadcar.Transform.prototype.addTransform = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tumcadcar.Transform} returns this
 */
proto.tumcadcar.Transform.prototype.clearTransformList = function() {
  return this.setTransformList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tumcadcar.Velocity.prototype.toObject = function(opt_includeInstance) {
  return proto.tumcadcar.Velocity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tumcadcar.Velocity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Velocity.toObject = function(includeInstance, msg) {
  var f, obj = {
    vX: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    vY: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    vZ: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    wX: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    wY: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    wZ: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tumcadcar.Velocity}
 */
proto.tumcadcar.Velocity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tumcadcar.Velocity;
  return proto.tumcadcar.Velocity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tumcadcar.Velocity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tumcadcar.Velocity}
 */
proto.tumcadcar.Velocity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWX(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWY(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tumcadcar.Velocity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tumcadcar.Velocity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tumcadcar.Velocity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Velocity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getVY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getVZ();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getWX();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getWY();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getWZ();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional float v_x = 1;
 * @return {number}
 */
proto.tumcadcar.Velocity.prototype.getVX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.Velocity} returns this
 */
proto.tumcadcar.Velocity.prototype.setVX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float v_y = 2;
 * @return {number}
 */
proto.tumcadcar.Velocity.prototype.getVY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.Velocity} returns this
 */
proto.tumcadcar.Velocity.prototype.setVY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float v_z = 3;
 * @return {number}
 */
proto.tumcadcar.Velocity.prototype.getVZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.Velocity} returns this
 */
proto.tumcadcar.Velocity.prototype.setVZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double w_x = 4;
 * @return {number}
 */
proto.tumcadcar.Velocity.prototype.getWX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.Velocity} returns this
 */
proto.tumcadcar.Velocity.prototype.setWX = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double w_y = 5;
 * @return {number}
 */
proto.tumcadcar.Velocity.prototype.getWY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.Velocity} returns this
 */
proto.tumcadcar.Velocity.prototype.setWY = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double w_z = 6;
 * @return {number}
 */
proto.tumcadcar.Velocity.prototype.getWZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.Velocity} returns this
 */
proto.tumcadcar.Velocity.prototype.setWZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tumcadcar.CameraCalibration.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tumcadcar.CameraCalibration.prototype.toObject = function(opt_includeInstance) {
  return proto.tumcadcar.CameraCalibration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tumcadcar.CameraCalibration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.CameraCalibration.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, 0),
    intrinsicList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    extrinsic: (f = msg.getExtrinsic()) && proto.tumcadcar.Transform.toObject(includeInstance, f),
    width: jspb.Message.getFieldWithDefault(msg, 4, 0),
    height: jspb.Message.getFieldWithDefault(msg, 5, 0),
    rollingShutterDirection: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tumcadcar.CameraCalibration}
 */
proto.tumcadcar.CameraCalibration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tumcadcar.CameraCalibration;
  return proto.tumcadcar.CameraCalibration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tumcadcar.CameraCalibration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tumcadcar.CameraCalibration}
 */
proto.tumcadcar.CameraCalibration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tumcadcar.CameraName.Name} */ (reader.readEnum());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setIntrinsicList(value);
      break;
    case 3:
      var value = new proto.tumcadcar.Transform;
      reader.readMessage(value,proto.tumcadcar.Transform.deserializeBinaryFromReader);
      msg.setExtrinsic(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 6:
      var value = /** @type {!proto.tumcadcar.CameraCalibration.RollingShutterReadOutDirection} */ (reader.readEnum());
      msg.setRollingShutterDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tumcadcar.CameraCalibration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tumcadcar.CameraCalibration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tumcadcar.CameraCalibration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.CameraCalibration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getIntrinsicList();
  if (f.length > 0) {
    writer.writePackedDouble(
      2,
      f
    );
  }
  f = message.getExtrinsic();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tumcadcar.Transform.serializeBinaryToWriter
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getRollingShutterDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.tumcadcar.CameraCalibration.RollingShutterReadOutDirection = {
  UNKNOWN: 0,
  TOP_TO_BOTTOM: 1,
  LEFT_TO_RIGHT: 2,
  BOTTOM_TO_TOP: 3,
  RIGHT_TO_LEFT: 4,
  GLOBAL_SHUTTER: 5
};

/**
 * optional CameraName.Name name = 1;
 * @return {!proto.tumcadcar.CameraName.Name}
 */
proto.tumcadcar.CameraCalibration.prototype.getName = function() {
  return /** @type {!proto.tumcadcar.CameraName.Name} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.tumcadcar.CameraName.Name} value
 * @return {!proto.tumcadcar.CameraCalibration} returns this
 */
proto.tumcadcar.CameraCalibration.prototype.setName = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated double intrinsic = 2;
 * @return {!Array<number>}
 */
proto.tumcadcar.CameraCalibration.prototype.getIntrinsicList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.tumcadcar.CameraCalibration} returns this
 */
proto.tumcadcar.CameraCalibration.prototype.setIntrinsicList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tumcadcar.CameraCalibration} returns this
 */
proto.tumcadcar.CameraCalibration.prototype.addIntrinsic = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tumcadcar.CameraCalibration} returns this
 */
proto.tumcadcar.CameraCalibration.prototype.clearIntrinsicList = function() {
  return this.setIntrinsicList([]);
};


/**
 * optional Transform extrinsic = 3;
 * @return {?proto.tumcadcar.Transform}
 */
proto.tumcadcar.CameraCalibration.prototype.getExtrinsic = function() {
  return /** @type{?proto.tumcadcar.Transform} */ (
    jspb.Message.getWrapperField(this, proto.tumcadcar.Transform, 3));
};


/**
 * @param {?proto.tumcadcar.Transform|undefined} value
 * @return {!proto.tumcadcar.CameraCalibration} returns this
*/
proto.tumcadcar.CameraCalibration.prototype.setExtrinsic = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tumcadcar.CameraCalibration} returns this
 */
proto.tumcadcar.CameraCalibration.prototype.clearExtrinsic = function() {
  return this.setExtrinsic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tumcadcar.CameraCalibration.prototype.hasExtrinsic = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 width = 4;
 * @return {number}
 */
proto.tumcadcar.CameraCalibration.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.CameraCalibration} returns this
 */
proto.tumcadcar.CameraCalibration.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 height = 5;
 * @return {number}
 */
proto.tumcadcar.CameraCalibration.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.CameraCalibration} returns this
 */
proto.tumcadcar.CameraCalibration.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional RollingShutterReadOutDirection rolling_shutter_direction = 6;
 * @return {!proto.tumcadcar.CameraCalibration.RollingShutterReadOutDirection}
 */
proto.tumcadcar.CameraCalibration.prototype.getRollingShutterDirection = function() {
  return /** @type {!proto.tumcadcar.CameraCalibration.RollingShutterReadOutDirection} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.tumcadcar.CameraCalibration.RollingShutterReadOutDirection} value
 * @return {!proto.tumcadcar.CameraCalibration} returns this
 */
proto.tumcadcar.CameraCalibration.prototype.setRollingShutterDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tumcadcar.LaserCalibration.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tumcadcar.LaserCalibration.prototype.toObject = function(opt_includeInstance) {
  return proto.tumcadcar.LaserCalibration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tumcadcar.LaserCalibration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.LaserCalibration.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, 0),
    beamInclinationsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    beamInclinationMin: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    beamInclinationMax: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    extrinsic: (f = msg.getExtrinsic()) && proto.tumcadcar.Transform.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tumcadcar.LaserCalibration}
 */
proto.tumcadcar.LaserCalibration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tumcadcar.LaserCalibration;
  return proto.tumcadcar.LaserCalibration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tumcadcar.LaserCalibration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tumcadcar.LaserCalibration}
 */
proto.tumcadcar.LaserCalibration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tumcadcar.LaserName.Name} */ (reader.readEnum());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setBeamInclinationsList(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBeamInclinationMin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBeamInclinationMax(value);
      break;
    case 5:
      var value = new proto.tumcadcar.Transform;
      reader.readMessage(value,proto.tumcadcar.Transform.deserializeBinaryFromReader);
      msg.setExtrinsic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tumcadcar.LaserCalibration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tumcadcar.LaserCalibration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tumcadcar.LaserCalibration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.LaserCalibration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBeamInclinationsList();
  if (f.length > 0) {
    writer.writePackedDouble(
      2,
      f
    );
  }
  f = message.getBeamInclinationMin();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getBeamInclinationMax();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getExtrinsic();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.tumcadcar.Transform.serializeBinaryToWriter
    );
  }
};


/**
 * optional LaserName.Name name = 1;
 * @return {!proto.tumcadcar.LaserName.Name}
 */
proto.tumcadcar.LaserCalibration.prototype.getName = function() {
  return /** @type {!proto.tumcadcar.LaserName.Name} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.tumcadcar.LaserName.Name} value
 * @return {!proto.tumcadcar.LaserCalibration} returns this
 */
proto.tumcadcar.LaserCalibration.prototype.setName = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated double beam_inclinations = 2;
 * @return {!Array<number>}
 */
proto.tumcadcar.LaserCalibration.prototype.getBeamInclinationsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.tumcadcar.LaserCalibration} returns this
 */
proto.tumcadcar.LaserCalibration.prototype.setBeamInclinationsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tumcadcar.LaserCalibration} returns this
 */
proto.tumcadcar.LaserCalibration.prototype.addBeamInclinations = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tumcadcar.LaserCalibration} returns this
 */
proto.tumcadcar.LaserCalibration.prototype.clearBeamInclinationsList = function() {
  return this.setBeamInclinationsList([]);
};


/**
 * optional double beam_inclination_min = 3;
 * @return {number}
 */
proto.tumcadcar.LaserCalibration.prototype.getBeamInclinationMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.LaserCalibration} returns this
 */
proto.tumcadcar.LaserCalibration.prototype.setBeamInclinationMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double beam_inclination_max = 4;
 * @return {number}
 */
proto.tumcadcar.LaserCalibration.prototype.getBeamInclinationMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.LaserCalibration} returns this
 */
proto.tumcadcar.LaserCalibration.prototype.setBeamInclinationMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional Transform extrinsic = 5;
 * @return {?proto.tumcadcar.Transform}
 */
proto.tumcadcar.LaserCalibration.prototype.getExtrinsic = function() {
  return /** @type{?proto.tumcadcar.Transform} */ (
    jspb.Message.getWrapperField(this, proto.tumcadcar.Transform, 5));
};


/**
 * @param {?proto.tumcadcar.Transform|undefined} value
 * @return {!proto.tumcadcar.LaserCalibration} returns this
*/
proto.tumcadcar.LaserCalibration.prototype.setExtrinsic = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tumcadcar.LaserCalibration} returns this
 */
proto.tumcadcar.LaserCalibration.prototype.clearExtrinsic = function() {
  return this.setExtrinsic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tumcadcar.LaserCalibration.prototype.hasExtrinsic = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tumcadcar.Context.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tumcadcar.Context.prototype.toObject = function(opt_includeInstance) {
  return proto.tumcadcar.Context.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tumcadcar.Context} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Context.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cameraCalibrationsList: jspb.Message.toObjectList(msg.getCameraCalibrationsList(),
    proto.tumcadcar.CameraCalibration.toObject, includeInstance),
    laserCalibrationsList: jspb.Message.toObjectList(msg.getLaserCalibrationsList(),
    proto.tumcadcar.LaserCalibration.toObject, includeInstance),
    stats: (f = msg.getStats()) && proto.tumcadcar.Context.Stats.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tumcadcar.Context}
 */
proto.tumcadcar.Context.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tumcadcar.Context;
  return proto.tumcadcar.Context.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tumcadcar.Context} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tumcadcar.Context}
 */
proto.tumcadcar.Context.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.tumcadcar.CameraCalibration;
      reader.readMessage(value,proto.tumcadcar.CameraCalibration.deserializeBinaryFromReader);
      msg.addCameraCalibrations(value);
      break;
    case 3:
      var value = new proto.tumcadcar.LaserCalibration;
      reader.readMessage(value,proto.tumcadcar.LaserCalibration.deserializeBinaryFromReader);
      msg.addLaserCalibrations(value);
      break;
    case 4:
      var value = new proto.tumcadcar.Context.Stats;
      reader.readMessage(value,proto.tumcadcar.Context.Stats.deserializeBinaryFromReader);
      msg.setStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tumcadcar.Context.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tumcadcar.Context.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tumcadcar.Context} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Context.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCameraCalibrationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.tumcadcar.CameraCalibration.serializeBinaryToWriter
    );
  }
  f = message.getLaserCalibrationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.tumcadcar.LaserCalibration.serializeBinaryToWriter
    );
  }
  f = message.getStats();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tumcadcar.Context.Stats.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tumcadcar.Context.Stats.repeatedFields_ = [1,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tumcadcar.Context.Stats.prototype.toObject = function(opt_includeInstance) {
  return proto.tumcadcar.Context.Stats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tumcadcar.Context.Stats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Context.Stats.toObject = function(includeInstance, msg) {
  var f, obj = {
    laserObjectCountsList: jspb.Message.toObjectList(msg.getLaserObjectCountsList(),
    proto.tumcadcar.Context.Stats.ObjectCount.toObject, includeInstance),
    cameraObjectCountsList: jspb.Message.toObjectList(msg.getCameraObjectCountsList(),
    proto.tumcadcar.Context.Stats.ObjectCount.toObject, includeInstance),
    timeOfDay: jspb.Message.getFieldWithDefault(msg, 2, ""),
    location: jspb.Message.getFieldWithDefault(msg, 3, ""),
    weather: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tumcadcar.Context.Stats}
 */
proto.tumcadcar.Context.Stats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tumcadcar.Context.Stats;
  return proto.tumcadcar.Context.Stats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tumcadcar.Context.Stats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tumcadcar.Context.Stats}
 */
proto.tumcadcar.Context.Stats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tumcadcar.Context.Stats.ObjectCount;
      reader.readMessage(value,proto.tumcadcar.Context.Stats.ObjectCount.deserializeBinaryFromReader);
      msg.addLaserObjectCounts(value);
      break;
    case 5:
      var value = new proto.tumcadcar.Context.Stats.ObjectCount;
      reader.readMessage(value,proto.tumcadcar.Context.Stats.ObjectCount.deserializeBinaryFromReader);
      msg.addCameraObjectCounts(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeOfDay(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeather(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tumcadcar.Context.Stats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tumcadcar.Context.Stats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tumcadcar.Context.Stats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Context.Stats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLaserObjectCountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tumcadcar.Context.Stats.ObjectCount.serializeBinaryToWriter
    );
  }
  f = message.getCameraObjectCountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.tumcadcar.Context.Stats.ObjectCount.serializeBinaryToWriter
    );
  }
  f = message.getTimeOfDay();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWeather();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tumcadcar.Context.Stats.ObjectCount.prototype.toObject = function(opt_includeInstance) {
  return proto.tumcadcar.Context.Stats.ObjectCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tumcadcar.Context.Stats.ObjectCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Context.Stats.ObjectCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tumcadcar.Context.Stats.ObjectCount}
 */
proto.tumcadcar.Context.Stats.ObjectCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tumcadcar.Context.Stats.ObjectCount;
  return proto.tumcadcar.Context.Stats.ObjectCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tumcadcar.Context.Stats.ObjectCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tumcadcar.Context.Stats.ObjectCount}
 */
proto.tumcadcar.Context.Stats.ObjectCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tumcadcar.Label.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tumcadcar.Context.Stats.ObjectCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tumcadcar.Context.Stats.ObjectCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tumcadcar.Context.Stats.ObjectCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Context.Stats.ObjectCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional Label.Type type = 1;
 * @return {!proto.tumcadcar.Label.Type}
 */
proto.tumcadcar.Context.Stats.ObjectCount.prototype.getType = function() {
  return /** @type {!proto.tumcadcar.Label.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.tumcadcar.Label.Type} value
 * @return {!proto.tumcadcar.Context.Stats.ObjectCount} returns this
 */
proto.tumcadcar.Context.Stats.ObjectCount.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.tumcadcar.Context.Stats.ObjectCount.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.Context.Stats.ObjectCount} returns this
 */
proto.tumcadcar.Context.Stats.ObjectCount.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated ObjectCount laser_object_counts = 1;
 * @return {!Array<!proto.tumcadcar.Context.Stats.ObjectCount>}
 */
proto.tumcadcar.Context.Stats.prototype.getLaserObjectCountsList = function() {
  return /** @type{!Array<!proto.tumcadcar.Context.Stats.ObjectCount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tumcadcar.Context.Stats.ObjectCount, 1));
};


/**
 * @param {!Array<!proto.tumcadcar.Context.Stats.ObjectCount>} value
 * @return {!proto.tumcadcar.Context.Stats} returns this
*/
proto.tumcadcar.Context.Stats.prototype.setLaserObjectCountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tumcadcar.Context.Stats.ObjectCount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tumcadcar.Context.Stats.ObjectCount}
 */
proto.tumcadcar.Context.Stats.prototype.addLaserObjectCounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tumcadcar.Context.Stats.ObjectCount, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tumcadcar.Context.Stats} returns this
 */
proto.tumcadcar.Context.Stats.prototype.clearLaserObjectCountsList = function() {
  return this.setLaserObjectCountsList([]);
};


/**
 * repeated ObjectCount camera_object_counts = 5;
 * @return {!Array<!proto.tumcadcar.Context.Stats.ObjectCount>}
 */
proto.tumcadcar.Context.Stats.prototype.getCameraObjectCountsList = function() {
  return /** @type{!Array<!proto.tumcadcar.Context.Stats.ObjectCount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tumcadcar.Context.Stats.ObjectCount, 5));
};


/**
 * @param {!Array<!proto.tumcadcar.Context.Stats.ObjectCount>} value
 * @return {!proto.tumcadcar.Context.Stats} returns this
*/
proto.tumcadcar.Context.Stats.prototype.setCameraObjectCountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.tumcadcar.Context.Stats.ObjectCount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tumcadcar.Context.Stats.ObjectCount}
 */
proto.tumcadcar.Context.Stats.prototype.addCameraObjectCounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.tumcadcar.Context.Stats.ObjectCount, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tumcadcar.Context.Stats} returns this
 */
proto.tumcadcar.Context.Stats.prototype.clearCameraObjectCountsList = function() {
  return this.setCameraObjectCountsList([]);
};


/**
 * optional string time_of_day = 2;
 * @return {string}
 */
proto.tumcadcar.Context.Stats.prototype.getTimeOfDay = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tumcadcar.Context.Stats} returns this
 */
proto.tumcadcar.Context.Stats.prototype.setTimeOfDay = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string location = 3;
 * @return {string}
 */
proto.tumcadcar.Context.Stats.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tumcadcar.Context.Stats} returns this
 */
proto.tumcadcar.Context.Stats.prototype.setLocation = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string weather = 4;
 * @return {string}
 */
proto.tumcadcar.Context.Stats.prototype.getWeather = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.tumcadcar.Context.Stats} returns this
 */
proto.tumcadcar.Context.Stats.prototype.setWeather = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tumcadcar.Context.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tumcadcar.Context} returns this
 */
proto.tumcadcar.Context.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated CameraCalibration camera_calibrations = 2;
 * @return {!Array<!proto.tumcadcar.CameraCalibration>}
 */
proto.tumcadcar.Context.prototype.getCameraCalibrationsList = function() {
  return /** @type{!Array<!proto.tumcadcar.CameraCalibration>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tumcadcar.CameraCalibration, 2));
};


/**
 * @param {!Array<!proto.tumcadcar.CameraCalibration>} value
 * @return {!proto.tumcadcar.Context} returns this
*/
proto.tumcadcar.Context.prototype.setCameraCalibrationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tumcadcar.CameraCalibration=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tumcadcar.CameraCalibration}
 */
proto.tumcadcar.Context.prototype.addCameraCalibrations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tumcadcar.CameraCalibration, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tumcadcar.Context} returns this
 */
proto.tumcadcar.Context.prototype.clearCameraCalibrationsList = function() {
  return this.setCameraCalibrationsList([]);
};


/**
 * repeated LaserCalibration laser_calibrations = 3;
 * @return {!Array<!proto.tumcadcar.LaserCalibration>}
 */
proto.tumcadcar.Context.prototype.getLaserCalibrationsList = function() {
  return /** @type{!Array<!proto.tumcadcar.LaserCalibration>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tumcadcar.LaserCalibration, 3));
};


/**
 * @param {!Array<!proto.tumcadcar.LaserCalibration>} value
 * @return {!proto.tumcadcar.Context} returns this
*/
proto.tumcadcar.Context.prototype.setLaserCalibrationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.tumcadcar.LaserCalibration=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tumcadcar.LaserCalibration}
 */
proto.tumcadcar.Context.prototype.addLaserCalibrations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.tumcadcar.LaserCalibration, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tumcadcar.Context} returns this
 */
proto.tumcadcar.Context.prototype.clearLaserCalibrationsList = function() {
  return this.setLaserCalibrationsList([]);
};


/**
 * optional Stats stats = 4;
 * @return {?proto.tumcadcar.Context.Stats}
 */
proto.tumcadcar.Context.prototype.getStats = function() {
  return /** @type{?proto.tumcadcar.Context.Stats} */ (
    jspb.Message.getWrapperField(this, proto.tumcadcar.Context.Stats, 4));
};


/**
 * @param {?proto.tumcadcar.Context.Stats|undefined} value
 * @return {!proto.tumcadcar.Context} returns this
*/
proto.tumcadcar.Context.prototype.setStats = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tumcadcar.Context} returns this
 */
proto.tumcadcar.Context.prototype.clearStats = function() {
  return this.setStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tumcadcar.Context.prototype.hasStats = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tumcadcar.RangeImage.prototype.toObject = function(opt_includeInstance) {
  return proto.tumcadcar.RangeImage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tumcadcar.RangeImage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.RangeImage.toObject = function(includeInstance, msg) {
  var f, obj = {
    rangeImageCompressed: msg.getRangeImageCompressed_asB64(),
    cameraProjectionCompressed: msg.getCameraProjectionCompressed_asB64(),
    rangeImagePoseCompressed: msg.getRangeImagePoseCompressed_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tumcadcar.RangeImage}
 */
proto.tumcadcar.RangeImage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tumcadcar.RangeImage;
  return proto.tumcadcar.RangeImage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tumcadcar.RangeImage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tumcadcar.RangeImage}
 */
proto.tumcadcar.RangeImage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRangeImageCompressed(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCameraProjectionCompressed(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRangeImagePoseCompressed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tumcadcar.RangeImage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tumcadcar.RangeImage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tumcadcar.RangeImage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.RangeImage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRangeImageCompressed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCameraProjectionCompressed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getRangeImagePoseCompressed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes range_image_compressed = 2;
 * @return {string}
 */
proto.tumcadcar.RangeImage.prototype.getRangeImageCompressed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes range_image_compressed = 2;
 * This is a type-conversion wrapper around `getRangeImageCompressed()`
 * @return {string}
 */
proto.tumcadcar.RangeImage.prototype.getRangeImageCompressed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRangeImageCompressed()));
};


/**
 * optional bytes range_image_compressed = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRangeImageCompressed()`
 * @return {!Uint8Array}
 */
proto.tumcadcar.RangeImage.prototype.getRangeImageCompressed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRangeImageCompressed()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tumcadcar.RangeImage} returns this
 */
proto.tumcadcar.RangeImage.prototype.setRangeImageCompressed = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes camera_projection_compressed = 3;
 * @return {string}
 */
proto.tumcadcar.RangeImage.prototype.getCameraProjectionCompressed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes camera_projection_compressed = 3;
 * This is a type-conversion wrapper around `getCameraProjectionCompressed()`
 * @return {string}
 */
proto.tumcadcar.RangeImage.prototype.getCameraProjectionCompressed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCameraProjectionCompressed()));
};


/**
 * optional bytes camera_projection_compressed = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCameraProjectionCompressed()`
 * @return {!Uint8Array}
 */
proto.tumcadcar.RangeImage.prototype.getCameraProjectionCompressed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCameraProjectionCompressed()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tumcadcar.RangeImage} returns this
 */
proto.tumcadcar.RangeImage.prototype.setCameraProjectionCompressed = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes range_image_pose_compressed = 4;
 * @return {string}
 */
proto.tumcadcar.RangeImage.prototype.getRangeImagePoseCompressed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes range_image_pose_compressed = 4;
 * This is a type-conversion wrapper around `getRangeImagePoseCompressed()`
 * @return {string}
 */
proto.tumcadcar.RangeImage.prototype.getRangeImagePoseCompressed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRangeImagePoseCompressed()));
};


/**
 * optional bytes range_image_pose_compressed = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRangeImagePoseCompressed()`
 * @return {!Uint8Array}
 */
proto.tumcadcar.RangeImage.prototype.getRangeImagePoseCompressed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRangeImagePoseCompressed()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tumcadcar.RangeImage} returns this
 */
proto.tumcadcar.RangeImage.prototype.setRangeImagePoseCompressed = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tumcadcar.CameraImage.prototype.toObject = function(opt_includeInstance) {
  return proto.tumcadcar.CameraImage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tumcadcar.CameraImage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.CameraImage.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, 0),
    image: msg.getImage_asB64(),
    pose: (f = msg.getPose()) && proto.tumcadcar.Transform.toObject(includeInstance, f),
    velocity: (f = msg.getVelocity()) && proto.tumcadcar.Velocity.toObject(includeInstance, f),
    poseTimestamp: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    shutter: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    cameraTriggerTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    cameraReadoutDoneTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tumcadcar.CameraImage}
 */
proto.tumcadcar.CameraImage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tumcadcar.CameraImage;
  return proto.tumcadcar.CameraImage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tumcadcar.CameraImage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tumcadcar.CameraImage}
 */
proto.tumcadcar.CameraImage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tumcadcar.CameraName.Name} */ (reader.readEnum());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImage(value);
      break;
    case 3:
      var value = new proto.tumcadcar.Transform;
      reader.readMessage(value,proto.tumcadcar.Transform.deserializeBinaryFromReader);
      msg.setPose(value);
      break;
    case 4:
      var value = new proto.tumcadcar.Velocity;
      reader.readMessage(value,proto.tumcadcar.Velocity.deserializeBinaryFromReader);
      msg.setVelocity(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPoseTimestamp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setShutter(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCameraTriggerTime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCameraReadoutDoneTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tumcadcar.CameraImage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tumcadcar.CameraImage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tumcadcar.CameraImage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.CameraImage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getImage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPose();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tumcadcar.Transform.serializeBinaryToWriter
    );
  }
  f = message.getVelocity();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tumcadcar.Velocity.serializeBinaryToWriter
    );
  }
  f = message.getPoseTimestamp();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getShutter();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getCameraTriggerTime();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getCameraReadoutDoneTime();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
};


/**
 * optional CameraName.Name name = 1;
 * @return {!proto.tumcadcar.CameraName.Name}
 */
proto.tumcadcar.CameraImage.prototype.getName = function() {
  return /** @type {!proto.tumcadcar.CameraName.Name} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.tumcadcar.CameraName.Name} value
 * @return {!proto.tumcadcar.CameraImage} returns this
 */
proto.tumcadcar.CameraImage.prototype.setName = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes image = 2;
 * @return {string}
 */
proto.tumcadcar.CameraImage.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes image = 2;
 * This is a type-conversion wrapper around `getImage()`
 * @return {string}
 */
proto.tumcadcar.CameraImage.prototype.getImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImage()));
};


/**
 * optional bytes image = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImage()`
 * @return {!Uint8Array}
 */
proto.tumcadcar.CameraImage.prototype.getImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tumcadcar.CameraImage} returns this
 */
proto.tumcadcar.CameraImage.prototype.setImage = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Transform pose = 3;
 * @return {?proto.tumcadcar.Transform}
 */
proto.tumcadcar.CameraImage.prototype.getPose = function() {
  return /** @type{?proto.tumcadcar.Transform} */ (
    jspb.Message.getWrapperField(this, proto.tumcadcar.Transform, 3));
};


/**
 * @param {?proto.tumcadcar.Transform|undefined} value
 * @return {!proto.tumcadcar.CameraImage} returns this
*/
proto.tumcadcar.CameraImage.prototype.setPose = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tumcadcar.CameraImage} returns this
 */
proto.tumcadcar.CameraImage.prototype.clearPose = function() {
  return this.setPose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tumcadcar.CameraImage.prototype.hasPose = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Velocity velocity = 4;
 * @return {?proto.tumcadcar.Velocity}
 */
proto.tumcadcar.CameraImage.prototype.getVelocity = function() {
  return /** @type{?proto.tumcadcar.Velocity} */ (
    jspb.Message.getWrapperField(this, proto.tumcadcar.Velocity, 4));
};


/**
 * @param {?proto.tumcadcar.Velocity|undefined} value
 * @return {!proto.tumcadcar.CameraImage} returns this
*/
proto.tumcadcar.CameraImage.prototype.setVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tumcadcar.CameraImage} returns this
 */
proto.tumcadcar.CameraImage.prototype.clearVelocity = function() {
  return this.setVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tumcadcar.CameraImage.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double pose_timestamp = 5;
 * @return {number}
 */
proto.tumcadcar.CameraImage.prototype.getPoseTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.CameraImage} returns this
 */
proto.tumcadcar.CameraImage.prototype.setPoseTimestamp = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double shutter = 6;
 * @return {number}
 */
proto.tumcadcar.CameraImage.prototype.getShutter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.CameraImage} returns this
 */
proto.tumcadcar.CameraImage.prototype.setShutter = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double camera_trigger_time = 7;
 * @return {number}
 */
proto.tumcadcar.CameraImage.prototype.getCameraTriggerTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.CameraImage} returns this
 */
proto.tumcadcar.CameraImage.prototype.setCameraTriggerTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double camera_readout_done_time = 8;
 * @return {number}
 */
proto.tumcadcar.CameraImage.prototype.getCameraReadoutDoneTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.CameraImage} returns this
 */
proto.tumcadcar.CameraImage.prototype.setCameraReadoutDoneTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tumcadcar.CameraLabels.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tumcadcar.CameraLabels.prototype.toObject = function(opt_includeInstance) {
  return proto.tumcadcar.CameraLabels.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tumcadcar.CameraLabels} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.CameraLabels.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, 0),
    labelsList: jspb.Message.toObjectList(msg.getLabelsList(),
    proto.tumcadcar.Label.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tumcadcar.CameraLabels}
 */
proto.tumcadcar.CameraLabels.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tumcadcar.CameraLabels;
  return proto.tumcadcar.CameraLabels.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tumcadcar.CameraLabels} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tumcadcar.CameraLabels}
 */
proto.tumcadcar.CameraLabels.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tumcadcar.CameraName.Name} */ (reader.readEnum());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.tumcadcar.Label;
      reader.readMessage(value,proto.tumcadcar.Label.deserializeBinaryFromReader);
      msg.addLabels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tumcadcar.CameraLabels.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tumcadcar.CameraLabels.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tumcadcar.CameraLabels} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.CameraLabels.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.tumcadcar.Label.serializeBinaryToWriter
    );
  }
};


/**
 * optional CameraName.Name name = 1;
 * @return {!proto.tumcadcar.CameraName.Name}
 */
proto.tumcadcar.CameraLabels.prototype.getName = function() {
  return /** @type {!proto.tumcadcar.CameraName.Name} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.tumcadcar.CameraName.Name} value
 * @return {!proto.tumcadcar.CameraLabels} returns this
 */
proto.tumcadcar.CameraLabels.prototype.setName = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated Label labels = 2;
 * @return {!Array<!proto.tumcadcar.Label>}
 */
proto.tumcadcar.CameraLabels.prototype.getLabelsList = function() {
  return /** @type{!Array<!proto.tumcadcar.Label>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tumcadcar.Label, 2));
};


/**
 * @param {!Array<!proto.tumcadcar.Label>} value
 * @return {!proto.tumcadcar.CameraLabels} returns this
*/
proto.tumcadcar.CameraLabels.prototype.setLabelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tumcadcar.Label=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tumcadcar.Label}
 */
proto.tumcadcar.CameraLabels.prototype.addLabels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tumcadcar.Label, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tumcadcar.CameraLabels} returns this
 */
proto.tumcadcar.CameraLabels.prototype.clearLabelsList = function() {
  return this.setLabelsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tumcadcar.Laser.prototype.toObject = function(opt_includeInstance) {
  return proto.tumcadcar.Laser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tumcadcar.Laser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Laser.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, 0),
    riReturn1: (f = msg.getRiReturn1()) && proto.tumcadcar.RangeImage.toObject(includeInstance, f),
    riReturn2: (f = msg.getRiReturn2()) && proto.tumcadcar.RangeImage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tumcadcar.Laser}
 */
proto.tumcadcar.Laser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tumcadcar.Laser;
  return proto.tumcadcar.Laser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tumcadcar.Laser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tumcadcar.Laser}
 */
proto.tumcadcar.Laser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tumcadcar.LaserName.Name} */ (reader.readEnum());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.tumcadcar.RangeImage;
      reader.readMessage(value,proto.tumcadcar.RangeImage.deserializeBinaryFromReader);
      msg.setRiReturn1(value);
      break;
    case 3:
      var value = new proto.tumcadcar.RangeImage;
      reader.readMessage(value,proto.tumcadcar.RangeImage.deserializeBinaryFromReader);
      msg.setRiReturn2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tumcadcar.Laser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tumcadcar.Laser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tumcadcar.Laser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Laser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRiReturn1();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tumcadcar.RangeImage.serializeBinaryToWriter
    );
  }
  f = message.getRiReturn2();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tumcadcar.RangeImage.serializeBinaryToWriter
    );
  }
};


/**
 * optional LaserName.Name name = 1;
 * @return {!proto.tumcadcar.LaserName.Name}
 */
proto.tumcadcar.Laser.prototype.getName = function() {
  return /** @type {!proto.tumcadcar.LaserName.Name} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.tumcadcar.LaserName.Name} value
 * @return {!proto.tumcadcar.Laser} returns this
 */
proto.tumcadcar.Laser.prototype.setName = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional RangeImage ri_return1 = 2;
 * @return {?proto.tumcadcar.RangeImage}
 */
proto.tumcadcar.Laser.prototype.getRiReturn1 = function() {
  return /** @type{?proto.tumcadcar.RangeImage} */ (
    jspb.Message.getWrapperField(this, proto.tumcadcar.RangeImage, 2));
};


/**
 * @param {?proto.tumcadcar.RangeImage|undefined} value
 * @return {!proto.tumcadcar.Laser} returns this
*/
proto.tumcadcar.Laser.prototype.setRiReturn1 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tumcadcar.Laser} returns this
 */
proto.tumcadcar.Laser.prototype.clearRiReturn1 = function() {
  return this.setRiReturn1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tumcadcar.Laser.prototype.hasRiReturn1 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RangeImage ri_return2 = 3;
 * @return {?proto.tumcadcar.RangeImage}
 */
proto.tumcadcar.Laser.prototype.getRiReturn2 = function() {
  return /** @type{?proto.tumcadcar.RangeImage} */ (
    jspb.Message.getWrapperField(this, proto.tumcadcar.RangeImage, 3));
};


/**
 * @param {?proto.tumcadcar.RangeImage|undefined} value
 * @return {!proto.tumcadcar.Laser} returns this
*/
proto.tumcadcar.Laser.prototype.setRiReturn2 = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tumcadcar.Laser} returns this
 */
proto.tumcadcar.Laser.prototype.clearRiReturn2 = function() {
  return this.setRiReturn2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tumcadcar.Laser.prototype.hasRiReturn2 = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tumcadcar.Points.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tumcadcar.Points.prototype.toObject = function(opt_includeInstance) {
  return proto.tumcadcar.Points.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tumcadcar.Points} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Points.toObject = function(includeInstance, msg) {
  var f, obj = {
    positionList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f,
    maskList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tumcadcar.Points}
 */
proto.tumcadcar.Points.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tumcadcar.Points;
  return proto.tumcadcar.Points.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tumcadcar.Points} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tumcadcar.Points}
 */
proto.tumcadcar.Points.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setPositionList(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setMaskList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tumcadcar.Points.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tumcadcar.Points.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tumcadcar.Points} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Points.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPositionList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
  f = message.getMaskList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * repeated float position = 1;
 * @return {!Array<number>}
 */
proto.tumcadcar.Points.prototype.getPositionList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.tumcadcar.Points} returns this
 */
proto.tumcadcar.Points.prototype.setPositionList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tumcadcar.Points} returns this
 */
proto.tumcadcar.Points.prototype.addPosition = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tumcadcar.Points} returns this
 */
proto.tumcadcar.Points.prototype.clearPositionList = function() {
  return this.setPositionList([]);
};


/**
 * repeated int32 mask = 2;
 * @return {!Array<number>}
 */
proto.tumcadcar.Points.prototype.getMaskList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.tumcadcar.Points} returns this
 */
proto.tumcadcar.Points.prototype.setMaskList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tumcadcar.Points} returns this
 */
proto.tumcadcar.Points.prototype.addMask = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tumcadcar.Points} returns this
 */
proto.tumcadcar.Points.prototype.clearMaskList = function() {
  return this.setMaskList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tumcadcar.Frame.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tumcadcar.Frame.prototype.toObject = function(opt_includeInstance) {
  return proto.tumcadcar.Frame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tumcadcar.Frame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Frame.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && proto.tumcadcar.Context.toObject(includeInstance, f),
    timestampMicros: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pose: (f = msg.getPose()) && proto.tumcadcar.Transform.toObject(includeInstance, f),
    points: (f = msg.getPoints()) && proto.tumcadcar.Points.toObject(includeInstance, f),
    imagesList: jspb.Message.toObjectList(msg.getImagesList(),
    proto.tumcadcar.CameraImage.toObject, includeInstance),
    laserLabelsList: jspb.Message.toObjectList(msg.getLaserLabelsList(),
    proto.tumcadcar.Label.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tumcadcar.Frame}
 */
proto.tumcadcar.Frame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tumcadcar.Frame;
  return proto.tumcadcar.Frame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tumcadcar.Frame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tumcadcar.Frame}
 */
proto.tumcadcar.Frame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tumcadcar.Context;
      reader.readMessage(value,proto.tumcadcar.Context.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestampMicros(value);
      break;
    case 3:
      var value = new proto.tumcadcar.Transform;
      reader.readMessage(value,proto.tumcadcar.Transform.deserializeBinaryFromReader);
      msg.setPose(value);
      break;
    case 4:
      var value = new proto.tumcadcar.Points;
      reader.readMessage(value,proto.tumcadcar.Points.deserializeBinaryFromReader);
      msg.setPoints(value);
      break;
    case 5:
      var value = new proto.tumcadcar.CameraImage;
      reader.readMessage(value,proto.tumcadcar.CameraImage.deserializeBinaryFromReader);
      msg.addImages(value);
      break;
    case 6:
      var value = new proto.tumcadcar.Label;
      reader.readMessage(value,proto.tumcadcar.Label.deserializeBinaryFromReader);
      msg.addLaserLabels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tumcadcar.Frame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tumcadcar.Frame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tumcadcar.Frame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tumcadcar.Frame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tumcadcar.Context.serializeBinaryToWriter
    );
  }
  f = message.getTimestampMicros();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPose();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tumcadcar.Transform.serializeBinaryToWriter
    );
  }
  f = message.getPoints();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tumcadcar.Points.serializeBinaryToWriter
    );
  }
  f = message.getImagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.tumcadcar.CameraImage.serializeBinaryToWriter
    );
  }
  f = message.getLaserLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.tumcadcar.Label.serializeBinaryToWriter
    );
  }
};


/**
 * optional Context context = 1;
 * @return {?proto.tumcadcar.Context}
 */
proto.tumcadcar.Frame.prototype.getContext = function() {
  return /** @type{?proto.tumcadcar.Context} */ (
    jspb.Message.getWrapperField(this, proto.tumcadcar.Context, 1));
};


/**
 * @param {?proto.tumcadcar.Context|undefined} value
 * @return {!proto.tumcadcar.Frame} returns this
*/
proto.tumcadcar.Frame.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tumcadcar.Frame} returns this
 */
proto.tumcadcar.Frame.prototype.clearContext = function() {
  return this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tumcadcar.Frame.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 timestamp_micros = 2;
 * @return {number}
 */
proto.tumcadcar.Frame.prototype.getTimestampMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tumcadcar.Frame} returns this
 */
proto.tumcadcar.Frame.prototype.setTimestampMicros = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Transform pose = 3;
 * @return {?proto.tumcadcar.Transform}
 */
proto.tumcadcar.Frame.prototype.getPose = function() {
  return /** @type{?proto.tumcadcar.Transform} */ (
    jspb.Message.getWrapperField(this, proto.tumcadcar.Transform, 3));
};


/**
 * @param {?proto.tumcadcar.Transform|undefined} value
 * @return {!proto.tumcadcar.Frame} returns this
*/
proto.tumcadcar.Frame.prototype.setPose = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tumcadcar.Frame} returns this
 */
proto.tumcadcar.Frame.prototype.clearPose = function() {
  return this.setPose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tumcadcar.Frame.prototype.hasPose = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Points points = 4;
 * @return {?proto.tumcadcar.Points}
 */
proto.tumcadcar.Frame.prototype.getPoints = function() {
  return /** @type{?proto.tumcadcar.Points} */ (
    jspb.Message.getWrapperField(this, proto.tumcadcar.Points, 4));
};


/**
 * @param {?proto.tumcadcar.Points|undefined} value
 * @return {!proto.tumcadcar.Frame} returns this
*/
proto.tumcadcar.Frame.prototype.setPoints = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tumcadcar.Frame} returns this
 */
proto.tumcadcar.Frame.prototype.clearPoints = function() {
  return this.setPoints(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tumcadcar.Frame.prototype.hasPoints = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated CameraImage images = 5;
 * @return {!Array<!proto.tumcadcar.CameraImage>}
 */
proto.tumcadcar.Frame.prototype.getImagesList = function() {
  return /** @type{!Array<!proto.tumcadcar.CameraImage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tumcadcar.CameraImage, 5));
};


/**
 * @param {!Array<!proto.tumcadcar.CameraImage>} value
 * @return {!proto.tumcadcar.Frame} returns this
*/
proto.tumcadcar.Frame.prototype.setImagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.tumcadcar.CameraImage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tumcadcar.CameraImage}
 */
proto.tumcadcar.Frame.prototype.addImages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.tumcadcar.CameraImage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tumcadcar.Frame} returns this
 */
proto.tumcadcar.Frame.prototype.clearImagesList = function() {
  return this.setImagesList([]);
};


/**
 * repeated Label laser_labels = 6;
 * @return {!Array<!proto.tumcadcar.Label>}
 */
proto.tumcadcar.Frame.prototype.getLaserLabelsList = function() {
  return /** @type{!Array<!proto.tumcadcar.Label>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tumcadcar.Label, 6));
};


/**
 * @param {!Array<!proto.tumcadcar.Label>} value
 * @return {!proto.tumcadcar.Frame} returns this
*/
proto.tumcadcar.Frame.prototype.setLaserLabelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.tumcadcar.Label=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tumcadcar.Label}
 */
proto.tumcadcar.Frame.prototype.addLaserLabels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.tumcadcar.Label, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tumcadcar.Frame} returns this
 */
proto.tumcadcar.Frame.prototype.clearLaserLabelsList = function() {
  return this.setLaserLabelsList([]);
};


goog.object.extend(exports, proto.tumcadcar);
